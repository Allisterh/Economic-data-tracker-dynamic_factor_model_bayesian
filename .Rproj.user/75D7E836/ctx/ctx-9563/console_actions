{
    "type": [
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "> ",
        "source(\"~/.Rprofile\")",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ──────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.1     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.4     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.4   ",
        "  \n── \u001B[1mConflicts\u001B[22m ────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(fredr)",
        "> ",
        "library(\"quantmod\")",
        "Loading required package: xts\nLoading required package: zoo\n\nAttaching package: ‘zoo’\n\nThe following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() ",
        "into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's pr",
        "otected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: ‘xts’\n\nThe following objects are masked from ‘package:dplyr’:\n\n    first, last\n\nLoading required package: TTR\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo ",
        "\n",
        "> ",
        "library(zoo)",
        "> ",
        "> ",
        "# in order to use this program you will need to download a key from FRED and then attach it to your R environment by running:",
        "> ",
        "# fredr::fredr_set_key()",
        "> ",
        "# or alternatively adding it to your global ~/.Rprofile document.",
        "> ",
        "# see more here: https://cran.r-project.org/web/packages/fredr/vignettes/fredr.html",
        "> ",
        "fredr_set_key(FRED_API_KEY)",
        "> ",
        "> ",
        "# get economic indicators -----------------------------------------------------",
        "> ",
        "indicators = tibble(",
        "+ ",
        "  series = c(\"AHETPI\", \"CMRMTSPL\", \"CPIAUCSL\",",
        "+ ",
        "             \"HOUST\", \"INDPRO\", \"PAYEMS\", \"GDPC1\",",
        "+ ",
        "             \"UMCSENT\", \"UNRATE\", \"W875RX1\",",
        "+ ",
        "             \"TTLCONS\", \"RSAFS\",",
        "+ ",
        "             \"MANEMP\", \"AMTMNO\"),",
        "+ ",
        "  label = c(\"Avg earnings\", \"Manf. and trade sales\", \"CPI\",",
        "+ ",
        "            \"Housing starts\", \"Ind. prdct\", \"Payrolls\", \"GDP\",",
        "+ ",
        "            \"Sentiment\", \"Unemployment\", \"Income excl transfers\",",
        "+ ",
        "            \"Total construction spending\", \"Retail trade and food services sales\", ",
        "+ ",
        "            \"Manufacturing jobs\", \"New manufactruing orders\")",
        "+ ",
        ")",
        "> ",
        "> ",
        "# read in data from fred api",
        "> ",
        "extract_fred = function(x){",
        "+ ",
        "  print(x)",
        "+ ",
        "  out = fredr::fredr_series_observations(series_id = x,",
        "+ ",
        "                                         observation_start = ymd(\"1945-01-01\"), ",
        "+ ",
        "                                         observation_end = Sys.Date()) ",
        "+ ",
        "  Sys.sleep(1)",
        "+ ",
        "  return(out)",
        "+ ",
        "}",
        "> ",
        "# extract_fred(\"AHETPI\")",
        "> ",
        "> ",
        "fred_raw = map_dfr(.x = indicators$series,",
        "+ ",
        "                    .f = extract_fred) %>%",
        "+ ",
        "  select(date, series = series_id, value) %>%",
        "+ ",
        "  ungroup() %>%",
        "+ ",
        "  left_join(indicators, by = c(\"series\"))",
        "[1] \"AHETPI\"\n[1] \"CMRMTSPL\"\n[1] \"CPIAUCSL\"\n[1] \"HOUST\"\n[1] \"INDPRO\"\n[1] \"PAYEMS\"\n[1] \"GDPC1\"\n[1] \"UMCSENT\"\n[1] \"UNRATE\"\n[1] \"W875RX1\"\n[1] \"TTLCONS\"\n[1] \"RSAFS\"\n[1] \"MANEMP\"\n[1] \"AMTMNO\"\n",
        "> ",
        "> ",
        "# download sp500 historical via the quantmod package",
        "> ",
        "sp500 =  getSymbols(\"^GSPC\", src = \"yahoo\",from = as_date(\"1945-01-01\"), to = as_date(Sys.Date()),auto.assign = F",
        "+ ",
        ")",
        "> ",
        "> ",
        "SP500 = tibble(date = as_date(rownames(as.data.frame(sp500))),",
        "+ ",
        "               value = as.numeric(sp500$GSPC.Close),",
        "+ ",
        "               series = \"SP500\",",
        "+ ",
        "               label = \"S&P500 close\")",
        "> ",
        "> ",
        "fred_raw = bind_rows(fred_raw, SP500)",
        "> ",
        "fred_raw",
        "\u001B[38;5;246m# A tibble: 30,323 × 4\u001B[39m\n   date       series value label       \n   \u001B[3m\u001B[38;5;246m<date>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \n\u001B[38;5;250m 1\u001B[39m 1964-01-01 AHETPI  2.5  Avg earnings\n\u001B[38;5;250m 2\u001B[39m 1964-02-01 AHETPI  2.5  Avg earnings\n\u001B[38;5;250m 3\u001B[39m 1964-03-01 AHETPI  2.51 Avg earnings\n\u001B[38;5;250m 4\u001B[39m 1964-04-01 AHETPI  2.52 Avg earnings\n\u001B[38;5;250m 5\u001B[39m 1964-05-01 AHETPI  2.52 Avg earnings\n\u001B[38;5;250m ",
        "6\u001B[39m 1964-06-01 AHETPI  2.53 Avg earnings\n\u001B[38;5;250m 7\u001B[39m 1964-07-01 AHETPI  2.54 Avg earnings\n\u001B[38;5;250m 8\u001B[39m 1964-08-01 AHETPI  2.55 Avg earnings\n\u001B[38;5;250m 9\u001B[39m 1964-09-01 AHETPI  2.56 Avg earnings\n\u001B[38;5;250m10\u001B[39m 1964-10-01 AHETPI  2.55 Avg earnings\n\u001B[38;5;246m# ℹ 30,313 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "> ",
        "# remove uninformative labels",
        "> ",
        "fred_raw = fred_raw %>%",
        "+ ",
        "  select(-series)",
        "> ",
        "> ",
        "# bind series to df",
        "> ",
        "fred_raw = ",
        "+ ",
        "  expand_grid(date = as_date(seq.Date(min(fred_raw$date),Sys.Date(),\"day\")),",
        "+ ",
        "              label = unique(fred_raw$label)) %>%",
        "+ ",
        "  left_join(fred_raw, by = c(\"label\", \"date\")) %>%",
        "+ ",
        "  arrange(label,date)",
        "> ",
        "> ",
        "fred_raw %>%",
        "+ ",
        "  na.omit() %>%",
        "+ ",
        "  ggplot(., aes(x=date,y=value)) + ",
        "+ ",
        "  geom_line() + ",
        "+ ",
        "  facet_wrap(~label,scales=\"free\") + ",
        "+ ",
        "  theme_minimal() ",
        "> ",
        "> ",
        "> ",
        "fred_raw %>%",
        "+ ",
        "  group_by(label) %>%",
        "+ ",
        "  filter(!is.na(value)) %>%",
        "+ ",
        "  filter(row_number() >= (n() -6)) %>%",
        "+ ",
        "  ggplot(., aes(x=date,y=value)) + ",
        "+ ",
        "  geom_line() + ",
        "+ ",
        "  facet_wrap(~label,scales=\"free\") + ",
        "+ ",
        "  theme_minimal() ",
        "> ",
        "> ",
        "# composition effect in wages during covid -- remove those obs ---------------",
        "> ",
        "# wages should grow by 2% annually from Jan 2020 to Jan 2022: https://www.atlantafed.org/chcs/wage-growth-tracker",
        "> ",
        "fred_raw %>% ",
        "+ ",
        "  filter(label == 'Avg earnings', ",
        "+ ",
        "         date >= ymd('2019-01-01'), date <= ymd('2022-01-01')) %>% na.omit %>%",
        "+ ",
        "  ggplot(., aes(x = date, y = value)) + geom_line()",
        "> ",
        "> ",
        "# we are going to remove values and interpolate",
        "> ",
        "fred_raw = fred_raw %>% ",
        "+ ",
        "  mutate(value = if_else(",
        "+ ",
        "    label == 'Avg earnings' & ",
        "+ ",
        "      date >= ymd('2020-01-01') & ",
        "+ ",
        "      date <= ymd('2021-06-01'),",
        "+ ",
        "    NA, value)",
        "+ ",
        "  )",
        "> ",
        "> ",
        "fred_raw %>% ",
        "+ ",
        "  filter(label == 'Avg earnings', ",
        "+ ",
        "         date >= ymd('2019-01-01'), date <= ymd('2022-01-01')) %>% na.omit %>%",
        "+ ",
        "  ggplot(., aes(x = date, y = value)) + geom_line()",
        "> ",
        "> ",
        "# impute missing values and smooth -------------------------------------------------------",
        "> ",
        "# fill in gaps between releases with linear interpolation",
        "> ",
        "# and gap since last release with LOCF",
        "> ",
        "fred_raw = fred_raw %>%",
        "+ ",
        "  group_by(label) %>%",
        "+ ",
        "  mutate(value = na.approx(value, na.rm=F)) %>%",
        "+ ",
        "  mutate(value = na.locf(value, na.rm=F)) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "> ",
        "> ",
        "# smooth out with weighted avg?",
        "> ",
        "fred_raw = fred_raw %>%",
        "+ ",
        "  group_by(label) %>%",
        "+ ",
        "  mutate(value = rollapply(width = 90, data = value,",
        "+ ",
        "                          align = \"right\", partial = T,",
        "+ ",
        "                          FUN = function(x){",
        "+ ",
        "                            if(all(is.na(x))){",
        "+ ",
        "                              return(NA)",
        "+ ",
        "                            }else{",
        "+ ",
        "                              wt = 0.98 ^ (max(index(x)) - index(x))",
        "+ ",
        "                              return(weighted.mean(x, wt,na.rm=T))",
        "+ ",
        "                            }",
        "+ ",
        "                          })",
        "+ ",
        ") %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "# compute annual growth -------------------------------------------------------",
        "> ",
        "fred = ",
        "+ ",
        "  fred_raw %>% ",
        "+ ",
        "  #gather(label,value,2:ncol(.)) %>%",
        "+ ",
        "  group_by(label) %>%",
        "+ ",
        "  arrange(label,date) %>%",
        "+ ",
        "  #mutate(value = value / first(value)) %>%",
        "+ ",
        "  group_by(label) %>%",
        "+ ",
        "  mutate(growth =  if_else(label %in% c(\"GDP\"),",
        "+ ",
        "                      ( (value / lag(value, 365) ) - 1 ) * 100,",
        "+ ",
        "  #                  ((((value / lag(value,182))^2)-1)*100) *0.2 + ",
        "+ ",
        "  #                  ( ((value / lag(value, 365) ) - 1 ) * 100 )*0.50 + ",
        "+ ",
        "  #                  ( ((value / lag(value, 730) ) - 1 ) * 100 )*0.3",
        "+ ",
        "                      ( (value / lag(value, 365) ) - 1 ) * 100,",
        "+ ",
        "                )",
        "+ ",
        "          )%>% ",
        "+ ",
        "  ungroup() ",
        "> ",
        "tail(fred$growth)",
        "[1] 7.145551 7.137549 7.127893 7.116618 7.103757 7.089346\n",
        "> ",
        "# adjust growth in wages for change in cpi",
        "> ",
        "cpi_deflator = fred %>% filter(label == \"CPI\") %>% select(date, deflator = growth) %>%",
        "+ ",
        "  mutate(deflator = ifelse(is.na(deflator), 0, deflator))",
        "> ",
        "fred = fred %>% ",
        "+ ",
        "  left_join(cpi_deflator) %>%",
        "+ ",
        "  mutate(adj_growth = if_else(label %in% c(\"Avg earnings\"),",
        "+ ",
        "                         growth - deflator,",
        "+ ",
        "                         growth)",
        "+ ",
        ")",
        "\u001B[38;5;232mJoining with `by = join_by(date)`\u001B[39m\n",
        "> ",
        "fred %>%",
        "+ ",
        "    ggplot(., aes(x=date)) + ",
        "+ ",
        "    geom_line(aes(y = growth, col = \"raw value\")) +  ",
        "+ ",
        "    geom_line(aes(y = adj_growth, col = \"cpi-adjusted value\")) + ",
        "+ ",
        "    facet_wrap(~label,scales=\"free\") + ",
        "+ ",
        "    theme_minimal()",
        "Warning messages:\n1: \u001B[38;5;232mRemoved 7304 rows containing missing values or values outside the scale\nrange (`geom_line()`).\u001B[39m \n2: \u001B[38;5;232mRemoved 7304 rows containing missing values or values outside the scale\nrange (`geom_line()`).\u001B[39m \n",
        "> ",
        "fred$growth = fred$adj_growth",
        "> ",
        "fred$adj_growth = NULL",
        "> ",
        "# look",
        "> ",
        "fred %>%",
        "+ ",
        "    ggplot(., aes(x=date,y=growth)) + ",
        "+ ",
        "    geom_line() + ",
        "+ ",
        "    facet_wrap(~label,scales=\"free\") + ",
        "+ ",
        "    theme_minimal()",
        "Warning message:\n\u001B[38;5;232mRemoved 7304 rows containing missing values or values outside the scale\nrange (`geom_line()`).\u001B[39m \n",
        "> ",
        "fred %>%",
        "+ ",
        "    filter(date >= ymd(\"2017-01-01\")) %>%",
        "+ ",
        "    na.omit() %>%",
        "+ ",
        "    ggplot(., aes(x=date,y=growth)) + ",
        "+ ",
        "    geom_line() + ",
        "+ ",
        "    facet_wrap(~label,scales=\"free\") + ",
        "+ ",
        "    theme_minimal()",
        "> ",
        "# standardize growth",
        "> ",
        "fred = fred %>%",
        "+ ",
        "  group_by(label) %>%",
        "+ ",
        "  mutate(",
        "+ ",
        "    std_growth = if_else(label == \"GDP\", ",
        "+ ",
        "                         growth, ",
        "+ ",
        "                         (growth - mean(growth,na.rm=T)) / sd(growth,na.rm=T)",
        "+ ",
        "                       )",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ungroup() %>%",
        "+ ",
        "  mutate(std_growth = if_else(label == \"GDP\", ",
        "+ ",
        "                              std_growth,",
        "+ ",
        "                              pmax(-5,pmin(5,std_growth)))",
        "+ ",
        ") ",
        "> ",
        "# invert certain series ",
        "> ",
        "fred = fred %>%",
        "+ ",
        "  mutate(std_growth = ifelse(label %in% c(\"CPI\", \"Unemployment\"),",
        "+ ",
        "                         std_growth * -1, ",
        "+ ",
        "                         std_growth))",
        "> ",
        "gg = fred %>%",
        "+ ",
        "  ggplot(., aes(x=date,y=std_growth)) + ",
        "+ ",
        "  geom_line() + ",
        "+ ",
        "  facet_wrap(~label) +",
        "+ ",
        "  theme_minimal()",
        "> ",
        "print(gg)",
        "Warning message:\n\u001B[38;5;232mRemoved 7304 rows containing missing values or values outside the scale\nrange (`geom_line()`).\u001B[39m \n",
        "> ",
        "gg = fred %>%",
        "+ ",
        "  filter(date >= ymd(\"2017-01-01\"), label != \"GDP\") %>%",
        "+ ",
        "  ggplot(., aes(x=date,y=std_growth)) + ",
        "+ ",
        "  geom_hline(yintercept = 0, col = \"red\", linetype = 2) +",
        "+ ",
        "  geom_line() + ",
        "+ ",
        "  facet_wrap(~label) +",
        "+ ",
        "  theme_minimal()",
        "> ",
        "print(gg)",
        "> ",
        "# write output ----------------------------------------------------------------",
        "> ",
        "fred_wide = fred %>% ",
        "+ ",
        "  # we want to keep raw values for the trade deficit",
        "+ ",
        "  mutate(std_growth = if_else(label == \"U.S. Trade Deficit\", value, std_growth)) %>%",
        "+ ",
        "  # continue",
        "+ ",
        "  select(date, label, std_growth) %>%",
        "+ ",
        "  group_by(date, label) %>%",
        "+ ",
        "  summarise(std_growth = mean(std_growth, na.rm = T)) %>%",
        "+ ",
        "  ungroup() %>%",
        "+ ",
        "  spread(label, std_growth) ",
        "\u001B[38;5;232m`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\u001B[39m\n",
        "> ",
        "fred_wide",
        "\u001B[38;5;246m# A tibble: 29,325 × 16\u001B[39m\n   date       `Avg earnings`   CPI   GDP `Housing starts`\n   \u001B[3m\u001B[38;5;246m<date>\u001B[39m\u001B[23m              \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m 1945-01-01            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 2\u001B[39m 1945-01-02            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[",
        "38;5;250m 3\u001B[39m 1945-01-03            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 4\u001B[39m 1945-01-04            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 5\u001B[39m 1945-01-05            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 6\u001B[39m 1945-01-06            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 7\u001B[39m 1945-01-07            \u001B[31mNaN\u001B[39m   \u001B",
        "[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 8\u001B[39m 1945-01-08            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 9\u001B[39m 1945-01-09            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m10\u001B[39m 1945-01-10            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;246m# ℹ 29,315 more rows\u001B[39m\n\u001B[38;5;246m# ℹ 11 more variables: `Income excl transfers` <dbl>, `Ind. pr",
        "dct` <dbl>,\u001B[39m\n\u001B[38;5;246m#   `Manf. and trade sales` <dbl>, `Manufacturing jobs` <dbl>,\u001B[39m\n\u001B[38;5;246m#   `New manufactruing orders` <dbl>, Payrolls <dbl>,\u001B[39m\n\u001B[38;5;246m#   `Retail trade and food services sales` <dbl>, `S&P500 close` <dbl>,\u001B[39m\n\u001B[38;5;246m#   Sentiment <dbl>, `Total construction spending` <dbl>,\u001B[39m\n\u001B[38;5;246m#   Unemployment <dbl>\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "ncol(fred_wide) * nrow(fred_wide)",
        "[1] 469200\n",
        "> ",
        "write_csv(fred_wide,\"_data/fred_data_wide.csv\")",
        "\rwrote 16.24kB in  0s, 740.39MB/s\r                                                                          \rwrote 1.00TB in  0s, 65.66TB/s\r                                                                          \r",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(cmdstanr)",
        "This is cmdstanr version 0.9.0\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n- CmdStan path: /Users/elliott/.cmdstan/cmdstan-2.36.0\n- CmdStan version: 2.36.0\n",
        "> ",
        "# wrangle data -------------------------------",
        "> ",
        "# system(\"Rscript _scripts/01_wrangle_fred.R\")",
        "> ",
        "dat = read_csv('_data/fred_data_wide.csv')  ",
        "\rindexing fred_data_wide.csv [===========================] 1.96TB/s, eta:  0s\r                                                                            \r\u001B[1mRows: \u001B[22m\u001B[34m29325\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m16\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[32mdbl\u001B[39m  (15): Avg earnings, CPI, GDP, Housing star",
        "ts, Income excl transfers...\n\u001B[34mdate\u001B[39m  (1): date\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "dat = dat[!is.na(dat$GDP),]",
        "> ",
        "dat = na.omit(dat)",
        "> ",
        "# get indices for training",
        "> ",
        "training_rows = which(day(dat$date) == 1)",
        "> ",
        "# detacth date and from dat",
        "> ",
        "dates = dat$date",
        "> ",
        "dat$date = NULL",
        "> ",
        "min(dates)",
        "[1] \"1994-01-01\"\n",
        "> ",
        "gdp = dat$GDP",
        "> ",
        "dat$GDP = NULL",
        "> ",
        "plot(gdp, type = 'l')",
        "> ",
        "View(fred_wide)",
        "> ",
        "# wrangle data -------------------------------",
        "> ",
        "# system(\"Rscript _scripts/01_wrangle_fred.R\")",
        "> ",
        "dat = read_csv('_data/fred_data_wide.csv')  ",
        "\rindexing fred_data_wide.csv [===========================] 1.25TB/s, eta:  0s\r                                                                            \r\u001B[1mRows: \u001B[22m\u001B[34m29325\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m16\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[32mdbl\u001B[39m  (15): Avg earnings, CPI, GDP, Housing star",
        "ts, Income excl transfers...\n\u001B[34mdate\u001B[39m  (1): date\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(cmdstanr)",
        "> ",
        "> ",
        "# wrangle data -------------------------------",
        "> ",
        "# system(\"Rscript _scripts/01_wrangle_fred.R\")",
        "> ",
        "dat = read_csv('_data/fred_data_wide.csv')  ",
        "\rindexing fred_data_wide.csv [=========================] 746.50GB/s, eta:  0s\r                                                                            \r\u001B[1mRows: \u001B[22m\u001B[34m29325\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m16\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[32mdbl\u001B[39m  (15): Avg earnings, CPI, GDP, Housing star",
        "ts, Income excl transfers...\n\u001B[34mdate\u001B[39m  (1): date\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "view(dat)",
        "> ",
        "# write output ----------------------------------------------------------------",
        "> ",
        "fred_wide = fred %>% ",
        "+ ",
        "  # we want to keep raw values for the trade deficit",
        "+ ",
        "  mutate(std_growth = if_else(label == \"U.S. Trade Deficit\", value, std_growth)) %>%",
        "+ ",
        "  # continue",
        "+ ",
        "  select(date, label, std_growth) %>%",
        "+ ",
        "  group_by(date, label) %>%",
        "+ ",
        "  summarise(std_growth = mean(std_growth, na.rm = T)) %>%",
        "+ ",
        "  ungroup() %>%",
        "+ ",
        "  spread(label, std_growth)  %>%",
        "+ ",
        "  filter(date >= ymd('1946-01-01')) # date of first observation",
        "\u001B[38;5;232m`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\u001B[39m\n",
        "> ",
        "fred_wide",
        "\u001B[38;5;246m# A tibble: 28,960 × 16\u001B[39m\n   date       `Avg earnings`   CPI   GDP `Housing starts`\n   \u001B[3m\u001B[38;5;246m<date>\u001B[39m\u001B[23m              \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m 1946-01-01            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 2\u001B[39m 1946-01-02            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[",
        "38;5;250m 3\u001B[39m 1946-01-03            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 4\u001B[39m 1946-01-04            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 5\u001B[39m 1946-01-05            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 6\u001B[39m 1946-01-06            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 7\u001B[39m 1946-01-07            \u001B[31mNaN\u001B[39m   \u001B",
        "[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 8\u001B[39m 1946-01-08            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m 9\u001B[39m 1946-01-09            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;250m10\u001B[39m 1946-01-10            \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m   \u001B[31mNaN\u001B[39m              \u001B[31mNaN\u001B[39m\n\u001B[38;5;246m# ℹ 28,950 more rows\u001B[39m\n\u001B[38;5;246m# ℹ 11 more variables: `Income excl transfers` <dbl>, `Ind. pr",
        "dct` <dbl>,\u001B[39m\n\u001B[38;5;246m#   `Manf. and trade sales` <dbl>, `Manufacturing jobs` <dbl>,\u001B[39m\n\u001B[38;5;246m#   `New manufactruing orders` <dbl>, Payrolls <dbl>,\u001B[39m\n\u001B[38;5;246m#   `Retail trade and food services sales` <dbl>, `S&P500 close` <dbl>,\u001B[39m\n\u001B[38;5;246m#   Sentiment <dbl>, `Total construction spending` <dbl>,\u001B[39m\n\u001B[38;5;246m#   Unemployment <dbl>\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "ncol(fred_wide) * nrow(fred_wide)",
        "[1] 463360\n",
        "> ",
        "write_csv(fred_wide,\"_data/fred_data_wide.csv\")",
        "\rwrote 32.61kB in  0s, 5.47GB/s\rwrote 1.00TB in  0s, 59.64TB/s\r                                                                          \r",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(cmdstanr)",
        "> ",
        "> ",
        "# wrangle data -------------------------------",
        "> ",
        "# system(\"Rscript _scripts/01_wrangle_fred.R\")",
        "> ",
        "dat = read_csv('_data/fred_data_wide.csv')  ",
        "\rindexing fred_data_wide.csv [=========================] 539.09GB/s, eta:  0s\r                                                                            \r\u001B[1mRows: \u001B[22m\u001B[34m28960\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m16\u001B[39m\n\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[32mdbl\u001B[39m  (15): Avg earnings, CPI, GDP, Housing star",
        "ts, Income excl transfers...\n\u001B[34mdate\u001B[39m  (1): date\n\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "> ",
        "dat = dat[!is.na(dat$GDP),]",
        "> ",
        "View(dat)",
        "\nRestarting R session...\n\n"
    ]
}